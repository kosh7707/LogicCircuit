// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2024 13:42:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          week4_ex4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module week4_ex4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Ce;
reg CLK;
reg Din0;
reg Din1;
reg Din2;
reg Din3;
reg RST;
// wires                                               
wire Dout0;
wire Dout1;
wire Dout2;
wire Dout3;

// assign statements (if any)                          
week4_ex4 i1 (
// port map - connection between master ports and signals/registers   
	.Ce(Ce),
	.CLK(CLK),
	.Din0(Din0),
	.Din1(Din1),
	.Din2(Din2),
	.Din3(Din3),
	.Dout0(Dout0),
	.Dout1(Dout1),
	.Dout2(Dout2),
	.Dout3(Dout3),
	.RST(RST)
);
initial 
begin 
#1000000 $finish;
end 

// RST
initial
begin
	RST = 1'b1;
end 

// Ce
initial
begin
	Ce = 1'b0;
	Ce = #140000 1'b1;
	Ce = #40000 1'b0;
	Ce = #80000 1'b1;
	Ce = #60000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// Din0
initial
begin
	Din0 = 1'b0;
	Din0 = #140000 1'b1;
	Din0 = #40000 1'b0;
end 

// Din1
initial
begin
	Din1 = 1'b0;
	Din1 = #260000 1'b1;
	Din1 = #60000 1'b0;
end 

// Din2
initial
begin
	Din2 = 1'b0;
	Din2 = #140000 1'b1;
	Din2 = #40000 1'b0;
end 

// Din3
initial
begin
	Din3 = 1'b0;
	Din3 = #260000 1'b1;
	Din3 = #60000 1'b0;
end 
endmodule

